#!/usr/bin/perl
#===============================================================================
#
#         FILE:  gosa-sd
#
#        USAGE:  ./gosa-sd
#
#  DESCRIPTION:
#
#      OPTIONS:  ---
# REQUIREMENTS:  libconfig-inifiles-perl libcrypt-rijndael-perl libxml-simple-perl libipc-shareable-perl libdata-dumper-simple-perl
#         BUGS:  ---
#        NOTES:
#       AUTHOR:   (Andreas Rettenberger), <rettenberger@gonicus.de>
#      COMPANY:
#      VERSION:  1.0
#      CREATED:  12.09.2007 08:54:41 CEST
#     REVISION:  ---
#===============================================================================


use strict;
use warnings;
use Getopt::Long;
use Config::IniFiles;
use POSIX;
use Time::HiRes qw( gettimeofday );

use Fcntl;
use IO::Socket::INET;
use Crypt::Rijndael;
use MIME::Base64;
use Digest::MD5  qw(md5 md5_hex md5_base64);
use XML::Simple;
use Data::Dumper;
use Sys::Syslog qw( :DEFAULT setlogsock);
use Cwd;
use File::Spec;
use IPC::Shareable qw( :lock);
IPC::Shareable->clean_up_all;
use GosaSupportDaemon;

use lib "/etc/gosa-si/modules";
my $modules_path = "/etc/gosa-si/modules";

my (%cfg_defaults, $foreground, $verbose, $ping_timeout);
my ($bus, $msg_to_bus, $bus_cipher);
my ($server, $server_mac_address, $server_events);
my ($gosa_server, $job_queue_timeout, $job_queue_table_name, $job_queue_file_name);
my ($known_daemons, $shmda, $known_clients, $shmcl, $known_modules);
my ($max_clients);
my ($pid_file, $procid, $pid, $log_file);
my (%free_child, %busy_child, $child_max, $child_min, %child_alive_time, $child_timeout);
my ($arp_activ, $arp_fifo, $arp_fifo_path);

# variables declared in config file are always set to 'our'
our (%cfg_defaults, $log_file, $pid_file, 
    $bus_activ, $bus_passwd, $bus_ip, $bus_port,
    $server_activ, $server_ip, $server_port, $server_passwd, $max_clients,
    $arp_activ, $arp_fifo_path,
    $gosa_activ, $gosa_passwd, $gosa_ip, $gosa_port, $gosa_timeout,
);

# additional variable which should be globaly accessable
our $xml;
our $server_address;
our $bus_address;
our $gosa_address;
our $no_bus;
our $no_arp;
our $verbose;
our $forground;
our $cfg_file;

# specifies the verbosity of the daemon_log
$verbose = 0 ;

# if foreground is not null, script will be not forked to background
$foreground = 0 ;

# specifies the timeout seconds while checking the online status of a registrating client
$ping_timeout = 5;

$no_bus = 0;

$no_arp = 0;

# name of table for storing gosa jobs
$job_queue_table_name = 'jobs';

# holds all other gosa-sd as well as the gosa-sd-bus
our $known_daemons = {};
our $shmda = tie($known_daemons, 'IPC::Shareable', undef, {create => 1, 
                                                            exclusive => 1, 
                                                            mode => 0666, 
                                                            destroy => 1,
                                                            });
# holds all registrated clients
our $known_clients = {};
our $shmcl = tie($known_clients, 'IPC::Shareable', undef, {create => 1, 
                                                            exclusive => 1, 
                                                            mode => 0666, 
                                                            destroy => 1,
                                                            });


%cfg_defaults =
("general" =>
    {"log_file" => [\$log_file, "/var/run/".$0.".log"],
    "pid_file" => [\$pid_file, "/var/run/".$0.".pid"],
    "child_max" => [\$child_max, 10],
    "child_min" => [\$child_min, 3],
    "child_timeout" => [\$child_timeout, 180],
    "job_queue_timeout" => [\$job_queue_timeout, undef],
    "job_queue_file_name" => [\$job_queue_file_name, '/tmp/jobs.db'],
   },
"bus" =>
    {"bus_activ" => [\$bus_activ, "on"],
    "bus_passwd" => [\$bus_passwd, ""],
    "bus_ip" => [\$bus_ip, ""],
    "bus_port" => [\$bus_port, "20080"],
    },
"server" =>
    {"server_activ" => [\$server_activ, "on"],
    "server_ip" => [\$server_ip, ""],
    "server_port" => [\$server_port, "20081"],
    "server_passwd" => [\$server_passwd, ""],
    "max_clients" => [\$max_clients, 100],
    },
"arp" =>
    {"arp_activ" => [\$arp_activ, "on"],
    "arp_fifo_path" => [\$arp_fifo_path, "/var/run/gosa-si/arp-notify"],
    },
"gosa" =>
    {"gosa_activ" => [\$gosa_activ, "on"],
    "gosa_ip" => [\$gosa_ip, ""],
    "gosa_port" => [\$gosa_port, "20082"],
    "gosa_passwd" => [\$gosa_passwd, "none"],
    },
    );


#===  FUNCTION  ================================================================
#         NAME:  usage
#   PARAMETERS:  nothing
#      RETURNS:  nothing
#  DESCRIPTION:  print out usage text to STDERR
#===============================================================================
sub usage {
    print STDERR << "EOF" ;
usage: $0 [-hvf] [-c config]

           -h        : this (help) message
           -c <file> : config file
           -f        : foreground, process will not be forked to background
           -v        : be verbose (multiple to increase verbosity)
           -no-bus   : starts $0 without connection to bus
           -no-arp   : starts $0 without connection to arp module
 
EOF
    print "\n" ;
}


#===  FUNCTION  ================================================================
#         NAME:  read_configfile
#   PARAMETERS:  cfg_file - string -
#      RETURNS:  nothing
#  DESCRIPTION:  read cfg_file and set variables
#===============================================================================
sub read_configfile {
    my $cfg;
    if( defined( $cfg_file) && ( length($cfg_file) > 0 )) {
        if( -r $cfg_file ) {
            $cfg = Config::IniFiles->new( -file => $cfg_file );
        } else {
            print STDERR "Couldn't read config file!";
        }
    } else {
        $cfg = Config::IniFiles->new() ;
    }
    foreach my $section (keys %cfg_defaults) {
        foreach my $param (keys %{$cfg_defaults{ $section }}) {
            my $pinfo = $cfg_defaults{ $section }{ $param };
            ${@$pinfo[ 0 ]} = $cfg->val( $section, $param, @$pinfo[ 1 ] );
        }
    }
}


#===  FUNCTION  ================================================================
#         NAME:  logging
#   PARAMETERS:  level - string - default 'info'
#                msg - string -
#                facility - string - default 'LOG_DAEMON'
#      RETURNS:  nothing
#  DESCRIPTION:  function for logging
#===============================================================================
sub daemon_log {
    # log into log_file
    my( $msg, $level ) = @_;
    if(not defined $msg) { return }
    if(not defined $level) { $level = 1 }
    if(defined $log_file){
        open(LOG_HANDLE, ">>$log_file");
        if(not defined open( LOG_HANDLE, ">>$log_file" )) {
            print STDERR "cannot open $log_file: $!";
            return }
            chomp($msg);
            if($level <= $verbose){
                print LOG_HANDLE "$level $msg\n";
                if(defined $foreground) { print $msg."\n" }
            }
    }
#    close( LOG_HANDLE );
#log into syslog
#    my ($msg, $level, $facility) = @_;
#    if(not defined $msg) {return}
#    if(not defined $level) {$level = "info"}
#    if(not defined $facility) {$facility = "LOG_DAEMON"}
#    openlog($0, "pid,cons,", $facility);
#    syslog($level, $msg);
#    closelog;
#    return;
}


#===  FUNCTION  ================================================================
#         NAME:  check_cmdline_param
#   PARAMETERS:  nothing
#      RETURNS:  nothing
#  DESCRIPTION:  validates commandline parameter
#===============================================================================
sub check_cmdline_param () {
    my $err_config;
    my $err_counter = 0;
    if( not defined( $cfg_file)) {
        #$err_config = "please specify a config file";
        #$err_counter += 1;
        my $cwd = getcwd;
        my $name = "/etc/gosa-si/server.conf";
        $cfg_file = File::Spec->catfile( $cwd, $name );
    }
    if( $err_counter > 0 ) {
        &usage( "", 1 );
        if( defined( $err_config)) { print STDERR "$err_config\n"}
        print STDERR "\n";
        exit( -1 );
    }
}


#===  FUNCTION  ================================================================
#         NAME:  check_pid
#   PARAMETERS:  nothing
#      RETURNS:  nothing
#  DESCRIPTION:  handels pid processing
#===============================================================================
sub check_pid {
    $pid = -1;
    # Check, if we are already running
    if( open(LOCK_FILE, "<$pid_file") ) {
        $pid = <LOCK_FILE>;
        if( defined $pid ) {
            chomp( $pid );
            if( -f "/proc/$pid/stat" ) {
                my($stat) = `cat /proc/$pid/stat` =~ m/$pid \((.+)\).*/;
                if( $0 eq $stat ) {
                    close( LOCK_FILE );
                    exit -1;
                }
            }
        }
        close( LOCK_FILE );
        unlink( $pid_file );
    }

    # create a syslog msg if it is not to possible to open PID file
    if (not sysopen(LOCK_FILE, $pid_file, O_WRONLY|O_CREAT|O_EXCL, 0644)) {
        my($msg) = "Couldn't obtain lockfile '$pid_file' ";
        if (open(LOCK_FILE, '<', $pid_file)
                && ($pid = <LOCK_FILE>))
        {
            chomp($pid);
            $msg .= "(PID $pid)\n";
        } else {
            $msg .= "(unable to read PID)\n";
        }
        if( ! ($foreground) ) {
            openlog( $0, "cons,pid", "daemon" );
            syslog( "warning", $msg );
            closelog();
        }
        else {
            print( STDERR " $msg " );
        }
        exit( -1 );
    }
}


#===  FUNCTION  ================================================================
#         NAME:  get_ip_and_mac 
#   PARAMETERS:  nothing
#      RETURNS:  (ip, mac) 
#  DESCRIPTION:  executes /sbin/ifconfig and parses the output, the first occurence 
#                of a inet address is returned as well as the mac address in the line
#                above the inet address
#===============================================================================
sub get_ip_and_mac {
    my $ip = "0.0.0.0.0"; # Defualt-IP
    my $mac = "00:00:00:00:00:00";  # Default-MAC
    my @ifconfig = qx(/sbin/ifconfig);
    foreach(@ifconfig) {
        if (/Hardware Adresse (\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2}):(\S{2})/) {
            $mac = "$1:$2:$3:$4:$5:$6";
            next;
        }
        if (/inet Adresse:(\d+).(\d+).(\d+).(\d+)/) {
            $ip = "$1.$2.$3.$4";
            last;
        }
    }
    return ($ip, $mac);
}



#===  FUNCTION  ================================================================
#         NAME:  import_modules
#   PARAMETERS:  module_path - string - abs. path to the directory the modules 
#                are stored
#      RETURNS:  nothing
#  DESCRIPTION:  each file in module_path which ends with '.pm' is imported by 
#                "require 'file';"
#===============================================================================
sub import_modules {
    daemon_log(" ", 1);

    if (not -e $modules_path) {
        daemon_log("ERROR: cannot find directory or directory is not readable: $modules_path", 1);   
    }

    opendir (DIR, $modules_path) or die "ERROR while loading modules from directory $modules_path : $!\n";
    while (defined (my $file = readdir (DIR))) {
        if (not $file =~ /(\S*?).pm$/) {
            next;
        }
        eval { require $file; };
        if ($@) {
            daemon_log("ERROR: gosa-sd could not load module $file", 1);
            daemon_log("$@", 5);
            next;
        }
        my $mod_name = $1;
        #my $module_tag_hash = eval( $mod_name.'::get_module_tags()' );

        my $info = eval($mod_name.'::get_module_info()');
        my ($input_address, $input_key, $input, $input_active, $input_type) = @{$info};
        $known_modules->{$mod_name} = $info;

        daemon_log("module $mod_name loaded", 1);
    }   

    # for debugging
    #while ( my ($module, $tag_hash) = each(%$known_modules)) {
    #    print "\tmodule: $module"."\n";   
    #    print "\ttags: ".join(", ", keys(%$tag_hash))."\n";
    #}
    close (DIR);
}


#===  FUNCTION  ================================================================
#         NAME:  sig_int_handler
#   PARAMETERS:  signal - string - signal arose from system
#      RETURNS:  noting
#  DESCRIPTION:  handels tasks to be done befor signal becomes active
#===============================================================================
sub sig_int_handler {
    my ($signal) = @_;
    if($server){
        close($server);
        daemon_log("daemon server closed", 1);
    }
    if( -p $arp_fifo_path ) {
        close $arp_fifo  ;
        unlink($arp_fifo_path) ;
        daemon_log("ARP_FIFO closed", 1) ;
    }

    if($gosa_server){
        close($gosa_server);
        daemon_log("gosa server closed", 1);
    }

    print STDERR "$signal\n";
    
    exit(1);
}
$SIG{INT} = \&sig_int_handler;


#===  FUNCTION  ================================================================
#         NAME:  activating_child
#   PARAMETERS:  msg - string - incoming message
#                host - string - host from which the incomming message comes
#      RETURNS:  nothing
#  DESCRIPTION:  handels the distribution of incoming messages to working childs
#===============================================================================
sub activating_child {
    my ($msg, $host, $client) = @_;
    my $child = &get_processing_child();
    my $pipe_wr = $$child{'pipe_wr'};
    my $pipe_rd = $$child{'pipe_rd'};
    $$child{client_ref} = $client;
    
    daemon_log("activating: childpid:$$child{'pid'}", 5);

    print $pipe_wr $msg.".".$host."\n";

    return;
}


#===  FUNCTION  ================================================================
#         NAME:  get_processing_child
#   PARAMETERS:  nothing
#      RETURNS:  child - hash - holding the process id and the references to the pipe
#                               handles pipe_wr and pipe_rd
#  DESCRIPTION:  handels the forking, reactivating and keeping alive tasks
#===============================================================================
sub get_processing_child {
    my $child;

    while(my ($key, $val) = each(%free_child)) {
        my $exitus_pid = waitpid($key, WNOHANG);
        if($exitus_pid != 0) {
            delete $free_child{$key};
        }
        daemon_log("free child:$key", 5);
    }
    # check @free_child and @busy_child
    my $free_len = scalar(keys(%free_child));
    my $busy_len = scalar(keys(%busy_child));
    daemon_log("free children $free_len, busy children $busy_len", 5);

    # if there is a free child, let the child work
    if($free_len > 0){
        my @keys = keys(%free_child);
        $child = $free_child{$keys[0]};
        if(defined $child) {
            $busy_child{$$child{'pid'}} = $child ;
            delete $free_child{$$child{'pid'}};
        }
        return $child;
    }

    # no free child, try to fork another one
    if($free_len + $busy_len < $child_max) {

        daemon_log("not enough children, create a new one", 5);

        # New pipes for communication
        my( $PARENT_wr, $PARENT_rd );
        my( $CHILD_wr, $CHILD_rd );
        pipe( $CHILD_rd,  $PARENT_wr );
        pipe( $PARENT_rd, $CHILD_wr  );
        $PARENT_wr->autoflush(1);
        $CHILD_wr->autoflush(1);

        ############
        # fork child
        ############
        my $child_pid = fork();
        
        #CHILD
        if($child_pid == 0) {
            # Close unused pipes
            close( $CHILD_rd );
            close( $CHILD_wr );
            while( 1 ) {
                my $rbits = "";
                vec( $rbits, fileno $PARENT_rd , 1 ) = 1;
                my $nf = select($rbits, undef, undef, $child_timeout);
                if($nf < 0 ) {
                    die "select(): $!\n";
                } elsif (! $nf) {
                    # if already child_min childs are alive, then leave loop
                    $free_len = scalar(keys(%free_child));
                    $busy_len = scalar(keys(%busy_child));
                    if($free_len + $busy_len >= $child_min) {
                        last;
                    } else {
                        redo;
                    }
                }

                # a job for a child arise
                if ( vec $rbits, fileno $PARENT_rd, 1 ) {
                    # read everything from pipe
                    my $msg = "";
                    $PARENT_rd->blocking(0);
                    while(1) {
                        my $read = <$PARENT_rd>;
                        if(not defined $read) { last}
                        $msg .= $read;
                    }

                    ######################################
                    # forward msg to all imported modules 
                    no strict "refs";
                    my $answer;
                    my %act_modules = %$known_modules;
                    while( my ($module, $info) = each(%act_modules)) {
                            my $tmp = &{ $module."::process_incoming_msg" }($msg);
                            if (defined $tmp) {
                                $answer = $tmp;
                            }
                    }        

                    #&print_known_daemons();
                    #&print_known_clients();

                    daemon_log("processing of msg finished", 5);
 
                   if (defined $answer) {
                        print $PARENT_wr $answer."\n";
                        daemon_log("with answer: $answer", 5);
                        daemon_log(" ", 5);
                    } else {
                        print $PARENT_wr "done"."\n";
                        daemon_log(" ", 5);
                    }
                    redo;
                }
            }
            # childs leaving the loop are allowed to die
            exit(0);


        #PARENT
        } else {
            # Close unused pipes
            close( $PARENT_rd );
            close( $PARENT_wr );

            # add child to child alive hash
            my %child_hash = (
                    'pid' => $child_pid,
                    'pipe_wr' => $CHILD_wr,
                    'pipe_rd' => $CHILD_rd,
                    'client_ref' => "",
                    );

            $child = \%child_hash;
            $busy_child{$$child{'pid'}} = $child;
            return $child;
        }
    }
}


#===  FUNCTION  ================================================================
#         NAME:  read_from_socket
#   PARAMETERS:  socket fh - 
#      RETURNS:  result string - readed characters from socket
#  DESCRIPTION:  reads data from socket in 16 byte steps
#===============================================================================
sub read_from_socket {
    my ($socket) = @_;
    my $result = "";

    $socket->blocking(1);
    $result = <$socket>;

    $socket->blocking(0);
    while ( my $char = <$socket> ) {
        if (not defined $char) { last }
        $result .= $char;
    }

    return $result;
}


#===  FUNCTION  ================================================================
#         NAME:  print_known_daemons
#   PARAMETERS:  nothing
#      RETURNS:  nothing
#  DESCRIPTION:  nomen est omen
#===============================================================================
sub print_known_daemons {
    my ($tmp) = @_ ;
    print "####################################\n";
    print "# status of known_daemons\n";
    $shmda->shlock(LOCK_EX);
    my @hosts = keys %$known_daemons;
    foreach my $host (@hosts) {
        my $status = $known_daemons->{$host}->{status} ;
        my $passwd = $known_daemons->{$host}->{passwd};
        my $timestamp = $known_daemons->{$host}->{timestamp};
        print "$host\n";
        print "\tstatus:    $status\n";
        print "\tpasswd:    $passwd\n";
        print "\ttimestamp: $timestamp\n";
    }
    $shmda->shunlock(LOCK_EX);
    print "####################################\n";
    return;
}


#===  FUNCTION  ================================================================
#         NAME:  create_known_daemon
#   PARAMETERS:  hostname - string - key for the hash known_daemons
#      RETURNS:  nothing
#  DESCRIPTION:  creates a dummy entry for hostname in known_daemons
#===============================================================================
sub create_known_daemon {
    my ($hostname) = @_;
    $shmda->shlock(LOCK_EX);
    $known_daemons->{$hostname} = {};
    $known_daemons->{$hostname}->{status} = "none";
    $known_daemons->{$hostname}->{passwd} = "none";
    $known_daemons->{$hostname}->{timestamp} = "none";
    $shmda->shunlock(LOCK_EX); 
    return;  
}


#===  FUNCTION  ================================================================
#         NAME:  add_content2known_daemons
#   PARAMETERS:  hostname - string - ip address and port of host (required)
#                status - string - (optional)
#                passwd - string - (optional)
#                mac_address - string - mac address of host (optional)
#      RETURNS:  nothing
#  DESCRIPTION:  nome est omen and updates each time the timestamp of hostname
#===============================================================================
sub add_content2known_daemons {
    my $arg = {
        hostname => undef, status => undef, passwd => undef,
        mac_address => undef, events => undef, 
        @_ };
    my $hostname = $arg->{hostname};
    my $status = $arg->{status};
    my $passwd = $arg->{passwd};
    my $mac_address = $arg->{mac_address};
    my $events = $arg->{events};

    if (not defined $hostname) {
        daemon_log("ERROR: function add_content2known_daemons is not invoked with requiered parameter 'hostname'", 1);
        return;
    }

    my ($seconds, $minutes, $hours, $monthday, $month,
    $year, $weekday, $yearday, $sommertime) = localtime(time);
    $hours = $hours < 10 ? $hours = "0".$hours : $hours;
    $minutes = $minutes < 10 ? $minutes = "0".$minutes : $minutes;
    $seconds = $seconds < 10 ? $seconds = "0".$seconds : $seconds;
    $month+=1;
    $month = $month < 10 ? $month = "0".$month : $month;
    $monthday = $monthday < 10 ? $monthday = "0".$monthday : $monthday;
    $year+=1900;
    my $t = "$year$month$monthday$hours$minutes$seconds";
    
    $shmda->shlock(LOCK_EX);
    if (defined $status) {
        $known_daemons->{$hostname}->{status} = $status;
    }
    if (defined $passwd) {
        $known_daemons->{$hostname}->{passwd} = $passwd;
    }
    if (defined $mac_address) {
        $known_daemons->{$hostname}->{mac_address} = $mac_address;
    }
    if (defined $events) {
        $known_daemons->{$hostname}->{events} = $events;
    }
    $known_daemons->{$hostname}->{timestamp} = $t;
    $shmda->shlock(LOCK_EX);
    return;
}


#===  FUNCTION  ================================================================
#         NAME:  update_known_daemons
#   PARAMETERS:  hostname - string - ip address and port of host (required)
#                status - string - (optional)
#                passwd - string - (optional)
#                client - string - ip address and port of client (optional)
#      RETURNS:  nothing
#  DESCRIPTION:  nome est omen and updates each time the timestamp of hostname
#===============================================================================
sub update_known_daemons {
    my $arg = {
        hostname => undef, status => undef, passwd => undef,
        @_ };
    my $hostname = $arg->{hostname};
    my $status = $arg->{status};
    my $passwd = $arg->{passwd};

    if (not defined $hostname) {
        daemon_log("ERROR: function add_content2known_daemons is not invoked with requiered parameter 'hostname'", 1);
        return;
    }

    my ($seconds, $minutes, $hours, $monthday, $month,
    $year, $weekday, $yearday, $sommertime) = localtime(time);
    $hours = $hours < 10 ? $hours = "0".$hours : $hours;
    $minutes = $minutes < 10 ? $minutes = "0".$minutes : $minutes;
    $seconds = $seconds < 10 ? $seconds = "0".$seconds : $seconds;
    $month+=1;
    $month = $month < 10 ? $month = "0".$month : $month;
    $monthday = $monthday < 10 ? $monthday = "0".$monthday : $monthday;
    $year+=1900;
    my $t = "$year$month$monthday$hours$minutes$seconds";

    $shmda->shlock(LOCK_EX);
    if (defined $status) {
        $known_daemons->{$hostname}->{status} = $status;
    }
    if (defined $passwd) {
        $known_daemons->{$hostname}->{passwd} = $passwd;
    }
    $known_daemons->{$hostname}->{timestamp} = $t;
    $shmda->shunlock(LOCK_EX);
    return;
}


#===  FUNCTION  ================================================================
#         NAME:  print_known_clients 
#   PARAMETERS:  nothing
#      RETURNS:  nothing
#  DESCRIPTION:  nomen est omen
#===============================================================================
sub print_known_clients {

    print "####################################\n";
    print "# status of known_clients\n";
    $shmcl->shlock(LOCK_EX);
    my @hosts = keys %$known_clients;
    if (@hosts) {
        foreach my $host (@hosts) {
            my $status = $known_clients->{$host}->{status} ;
            my $passwd = $known_clients->{$host}->{passwd};
            my $timestamp = $known_clients->{$host}->{timestamp};
            my $mac_address = $known_clients->{$host}->{mac_address};
            my $events = $known_clients->{$host}->{events};
            print "$host\n";
            print "\tstatus:      $status\n";
            print "\tpasswd:      $passwd\n";
            print "\ttimestamp:   $timestamp\n";
            print "\tmac_address: $mac_address\n";
            print "\tevents:      $events\n";
        }
    }
    $shmcl->shunlock(LOCK_EX);
    print "####################################\n";
    return;
}


#===  FUNCTION  ================================================================
#         NAME:  create_known_client
#   PARAMETERS:  hostname - string - key for the hash known_clients
#      RETURNS:  nothing
#  DESCRIPTION:  creates a dummy entry for hostname in known_clients
#===============================================================================
sub create_known_client {
    my ($hostname) = @_;
    $shmcl->shlock(LOCK_EX);
    $known_clients->{$hostname} = {};
    $known_clients->{$hostname}->{status} = "none";
    $known_clients->{$hostname}->{passwd} = "none";
    $known_clients->{$hostname}->{timestamp} = "none";
    $known_clients->{$hostname}->{mac_address} = "none";
    $known_clients->{$hostname}->{events} = "none";
    $shmcl->shunlock(LOCK_EX); 
    return;  
}


#===  FUNCTION  ================================================================
#         NAME:  add_content2known_clients
#   PARAMETERS:  hostname - string - ip address and port of host (required)
#                status - string - (optional)
#                passwd - string - (optional)
#                mac_address - string - (optional)
#                events - string - event of client, executable skripts 
#                under /etc/gosac/events
#      RETURNS:  nothing
#  DESCRIPTION:  nome est omen and updates each time the timestamp of hostname
#===============================================================================
sub add_content2known_clients {
    my $arg = {
        hostname => undef, status => undef, passwd => undef,
        mac_address => undef, events => undef, 
        @_ };
    my $hostname = $arg->{hostname};
    my $status = $arg->{status};
    my $passwd = $arg->{passwd};
    my $mac_address = $arg->{mac_address};
    my $events = $arg->{events};

    if (not defined $hostname) {
        daemon_log("ERROR: function add_content2known_clients is not invoked with requiered parameter 'hostname'", 1);
        return;
    }

    my ($seconds, $minutes, $hours, $monthday, $month,
    $year, $weekday, $yearday, $sommertime) = localtime(time);
    $hours = $hours < 10 ? $hours = "0".$hours : $hours;
    $minutes = $minutes < 10 ? $minutes = "0".$minutes : $minutes;
    $seconds = $seconds < 10 ? $seconds = "0".$seconds : $seconds;
    $month+=1;
    $month = $month < 10 ? $month = "0".$month : $month;
    $monthday = $monthday < 10 ? $monthday = "0".$monthday : $monthday;
    $year+=1900;
    my $t = "$year$month$monthday$hours$minutes$seconds";
    
    $shmcl->shlock(LOCK_EX);
    if (defined $status) {
        $known_clients->{$hostname}->{status} = $status;
    }
    if (defined $passwd) {
        $known_clients->{$hostname}->{passwd} = $passwd;
    }
    if (defined $mac_address) {
        $known_clients->{$hostname}->{mac_address} = $mac_address;
    }
    if (defined $events) {
        $known_clients->{$hostname}->{events} = $events;
    }
    $known_clients->{$hostname}->{timestamp} = $t;
    $shmcl->shlock(LOCK_EX);
    return;
}
 

#===  FUNCTION  ================================================================
#         NAME:  
#   PARAMETERS:  
#      RETURNS:  
#  DESCRIPTION:  
#===============================================================================    
sub clean_up_known_clients {
    my ($address) = @_ ;
    
    if (not exists $known_clients->{$address}) {
        daemon_log("cannot prune known_clients from $address, client not known", 5);
        return;
    }

    delete $known_clients->{$address};

    # send bus a msg that address was deleted from known_clients
    my $out_hash = &create_xml_hash('delete_client', $server_address, $bus_address, $address);
    &send_msg_hash2bus($out_hash);

    daemon_log("client $address deleted from known_clients because of multiple down time", 3);
    return;
}


#===  FUNCTION  ================================================================
#         NAME:  update_known_clients
#   PARAMETERS:  hostname - string - ip address and port of host (required)
#                status - string - (optional)
#                passwd - string - (optional)
#                client - string - ip address and port of client (optional)
#      RETURNS:  nothing
#  DESCRIPTION:  nome est omen and updates each time the timestamp of hostname
#===============================================================================
sub update_known_clients {
    my $arg = {
        hostname => undef, status => undef, passwd => undef,
        mac_address => undef, events => undef,
        @_ };
    my $hostname = $arg->{hostname};
    my $status = $arg->{status};
    my $passwd = $arg->{passwd};
    my $mac_address = $arg->{mac_address};
    my $events = $arg->{events};

    if (not defined $hostname) {
        daemon_log("ERROR: function add_content2known_daemons is not invoked with requiered parameter 'hostname'", 1);
        return;
    }

    my ($seconds, $minutes, $hours, $monthday, $month,
    $year, $weekday, $yearday, $sommertime) = localtime(time);
    $hours = $hours < 10 ? $hours = "0".$hours : $hours;
    $minutes = $minutes < 10 ? $minutes = "0".$minutes : $minutes;
    $seconds = $seconds < 10 ? $seconds = "0".$seconds : $seconds;
    $month+=1;
    $month = $month < 10 ? $month = "0".$month : $month;
    $monthday = $monthday < 10 ? $monthday = "0".$monthday : $monthday;
    $year+=1900;
    my $t = "$year$month$monthday$hours$minutes$seconds";

    $shmcl->shlock(LOCK_EX);
    if (defined $status) {
        $known_clients->{$hostname}->{status} = $status;
    }
    if (defined $passwd) {
        $known_clients->{$hostname}->{passwd} = $passwd;
    }
    if (defined $mac_address) {
        $known_clients->{$hostname}->{mac_address} = $mac_address; 
    }
    if (defined $events) {
        $known_clients->{$hostname}->{events} = $events;
    }
    $known_clients->{$hostname}->{timestamp} = $t;
    $shmcl->shunlock(LOCK_EX);
    return;
}







#==== MAIN = main ==============================================================

#  parse commandline options
Getopt::Long::Configure( "bundling" );
GetOptions("h|help" => \&usage,
        "c|config=s" => \$cfg_file,
        "f|foreground" => \$foreground,
        "v|verbose+" => \$verbose,
        "no-bus+" => \$no_bus,
        "no-arp+" => \$no_arp,
           );

#  read and set config parameters
&check_cmdline_param ;
&read_configfile;
&check_pid;

$SIG{CHLD} = 'IGNORE';

# restart daemon log file
if(-e $log_file ) { unlink $log_file }
daemon_log(" ", 1);
daemon_log("$0 started!", 1);

# Just fork, if we"re not in foreground mode
if( ! $foreground ) { $pid = fork(); }
else { $pid = $$; }

# Do something useful - put our PID into the pid_file
if( 0 != $pid ) {
    open( LOCK_FILE, ">$pid_file" );
    print LOCK_FILE "$pid\n";
close( LOCK_FILE );
    if( !$foreground ) { exit( 0 ) };
}

# import all modules
&import_modules;

# check wether all modules are gosa-si valid passwd check

# connect to gosa-si job queue
my $job_db = DBsqlite->new($job_queue_file_name);

# create reading and writing vectors
my $rbits = my $wbits = my $ebits = "";

# add all module inputs to listening vector
while( my ($mod_name, $info) = each %$known_modules ) {
    my ($input_address, $input_key, $input, $input_activ, $input_type) = @{$info};
    vec($rbits, fileno $input, 1) = 1;   

}


## start arp fifo
#if ($no_arp > 0) {
#    $arp_activ = "off";
#}
#my $my_fifo;
#if($arp_activ eq "on") {
#    daemon_log(" ", 1);
#    $my_fifo = &open_fifo($arp_fifo_path);
#    if($my_fifo == 0) { die "fifo file disappeared\n" }
#    sysopen($arp_fifo, $arp_fifo_path, O_RDWR) or die "can't read from $arp_fifo: $!" ;
#    
#    vec($rbits, fileno $arp_fifo, 1) = 1;
#}
#


##################################
#everything ready, okay, lets start
##################################
while(1) {

    # add all handles from the childs
    while ( my ($pid, $child_hash) = each %busy_child ) {
        
        # check whether process still exists
        my $exitus_pid = waitpid($pid, WNOHANG);
        if($exitus_pid != 0) {
            delete $busy_child{$pid};
            next;
        }
     
        # add child fhd to the listener    
        my $fhd = $$child_hash{'pipe_rd'};
        vec($rbits, fileno $fhd, 1) = 1;
    }

    my ($rout, $wout);
    my $nf = select($rout=$rbits, $wout=$wbits, undef, $job_queue_timeout);

    # error handling
    if($nf < 0 ) {
    }


    if($arp_activ eq "on" && vec($rout, fileno $arp_fifo, 1)) {
        my $in_msg = <$arp_fifo>;
        chomp($in_msg);
        print "arp_activ: msg: $in_msg\n";
        my $act_passwd = $known_daemons->{$bus_address}->{passwd};
        print "arp_activ: arp_passwd: $act_passwd\n";

        my $in_msg_hash = $xml->XMLin($in_msg, ForceArray=>1);

        my $target = &get_content_from_xml_hash($in_msg_hash, 'target');

        if ($target eq $server_address) { 
             print "arp_activ: forward to server\n";
            my $arp_cipher = &create_ciphering($act_passwd);
            my $crypted_msg = &encrypt_msg($in_msg, $arp_cipher);
            &activating_child($crypted_msg, $server_ip);
        } else {
            print "arp_activ: send to bus\n";
            &send_msg_hash2address($in_msg_hash, $bus_address);
        }
        print "\n";
    }


    # check input fhd of all modules 
    while ( my ($mod_name, $info) = each %$known_modules) {
        my $input_fhd = @{$info}[2];    
        my $input_activ = @{$info}[3];
        if (vec($rout, fileno $input_fhd, 1) && $input_activ eq 'on') {
            daemon_log(" ", 1);
            my $client = $input_fhd->accept();
            my $other_end = getpeername($client);
            if(not defined $other_end) {
                daemon_log("client cannot be identified: $!");
            } else {
                my ($port, $iaddr) = unpack_sockaddr_in($other_end);
                my $actual_ip = inet_ntoa($iaddr);
                daemon_log("accept client at daemon socket from $actual_ip", 5);
                my $in_msg = &read_from_socket($client);
                if(defined $in_msg){
                    chomp($in_msg);
                    &activating_child($in_msg, $actual_ip, $client);
                } else {
                    daemon_log("cannot read from $actual_ip", 5);
                }
            }
            #close($client);

        }
    }

    # check all processing childs whether they are finished ('done') or 
    while ( my ($pid, $child_hash) = each %busy_child ) {
        my $fhd = $$child_hash{'pipe_rd'};

        if (vec($rout, fileno $fhd, 1) ) {
            daemon_log("process child $pid is ready to read", 5);

            $fhd->blocking(1);
            my $in_msg = <$fhd>;
            $fhd->blocking(0);
            my $part_in_msg;
            while ($part_in_msg = <$fhd>) {
                if (not defined $part_in_msg) {
                    last;
                }
                $in_msg .= $part_in_msg;
            }
            chomp($in_msg);

            daemon_log("process child read: $in_msg", 5);
            if (not defined $in_msg) { 
                next; 
            } elsif ($in_msg =~ "done") {
                delete $busy_child{$pid};
                $free_child{$pid} = $child_hash;
 
            } else {
                # send computed answer back to connected client
                my $act_client = $busy_child{$pid}{client_ref};
                print $act_client $in_msg."\n";

                #my $act_pipe = $busy_child{$pid}{pipe_rd};
                sleep(10);
                close ($act_client);   
                delete $busy_child{$pid};
                $free_child{$pid} = $child_hash;

            }
        }
    }

    # check gosa job queue for jobs with executable timestamp
    print ">>>>>>>>>>>check gosa job queue ";
    my ($seconds, $minutes, $hours, $monthday, $month,
    $year, $weekday, $yearday, $sommertime) = localtime(time);
    $hours = $hours < 10 ? $hours = "0".$hours : $hours;
    $minutes = $minutes < 10 ? $minutes = "0".$minutes : $minutes;
    $seconds = $seconds < 10 ? $seconds = "0".$seconds : $seconds;
    $month+=1;
    $month = $month < 10 ? $month = "0".$month : $month;
    $monthday = $monthday < 10 ? $monthday = "0".$monthday : $monthday;
    $year+=1900;
    my $timestamp = "$year$month$monthday$hours$minutes$seconds";
    print "$timestamp\n";
    
    
    my $sql = "SELECT * FROM '$job_queue_table_name' WHERE status='waiting' AND timestamp<'$timestamp'";
    my $res = $job_db->exec_statement($sql);
    foreach my $msg (@{$res}) {
        
        my $jobdb_id = @{$msg}[0];
        my $job_msg_hash = &transform_msg2hash(@{$msg}[6]);
        my $out_msg_hash = $job_msg_hash;
    
        # hole mac address und suche die entsprechende ip addresse
        my $target;
        my @hostnames = keys %{$known_clients};
        foreach my $hostname (@hostnames) {
            if ($known_clients->{$hostname}->{mac_address} eq $job_msg_hash->{mac}[0]) {
                $target = $hostname;
                last;
            }
        }
        
        if (not defined $target) {
            &daemon_log("ERROR: no host found for mac address: $job_msg_hash->{mac}[0]", 1);
            next;
        }

        # add target
        print "select: target: $target\n";
        &add_content2xml_hash($out_msg_hash, "target", $target);

        # add new header
        my $out_header = $job_msg_hash->{header}[0];
        $out_header =~ s/job_/gosa_/;
        print "select: header: $out_header\n";
        delete $out_msg_hash->{header};
        &add_content2xml_hash($out_msg_hash, "header", $out_header);
        
        # add sqlite_id 
        &add_content2xml_hash($out_msg_hash, "jobdb_id", $jobdb_id); 
    
#        my $out_msg = &create_xml_string($out_msg_hash);
#
#        # encrypt msg as a GosaPackage module
#        my $cipher = &create_ciphering($gosa_passwd);
#        my $crypted_out_msg = &encrypt_msg($out_msg, $cipher);

        my $error = &send_msg_hash2address($out_msg_hash, "$gosa_ip:$gosa_port", $gosa_passwd);

        if ($error == 0) {
            my $sql = "UPDATE '$job_queue_table_name' SET status='processing', target='$target' WHERE id='$jobdb_id'";
            my $res = $job_db->exec_statement($sql);
        }


    }  


}
