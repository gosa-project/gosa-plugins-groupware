#!/bin/bash

usage() {
  echo "Usage: ${0##*/} [--download] [-b|--branch branch] [-e|--email mail] [--depends] plugin-dir|plugin.tar.gz" >&2
  exit 1
}


load_dsc() {
  if [ -r "$1" ]; then
    PL_NAME=$(sed -n 's/"//g;s/^name\s*=\s*\(.*\)$/\1/p' "$1")
    PL_VERSION=$(sed -n 's/"//g;s/^version\s*=\s*\(.*\)$/\1/p' "$1")
    TDEPENDS=$(sed -n 's/"//g;s/^depends\s*=\s*\(.*\)$/\1/p' "$1")
    for dep in $TDEPENDS; do
      PL_DEPENDS="gosa-plugin-$dep, $PL_DEPENDS"
    done
    TCONFLICTS=$(sed -n 's/"//g;s/^conflicts\s*=\s*\(.*\)$/\1/p' "$1")
    for dep in $TCONFLICTS; do
      PL_CONFLICTS="gosa-plugin-$dep, $PL_CONFLICTS"
    done
    PL_DESCRIPTION=$(sed -n 's/"//g;s/^description\s*=\s*\(.*\)$/\1/p' "$1")
    PL_AUTHOR=$(sed -n 's/"//g;s/^author\s*=\s*\([^<]*\).*$/\1/p' "$1")
    PL_MAIL=$(sed -n 's/"//g;s/^author\s*=[^<].*<\([^>]*\).*$/\1/p' "$1")
  else
    echo "Error: cannot find description file" >&2
    exit 1
  fi
}


TEMP=`getopt -o e:r: --long download,release:,email:,depends: -n 'dh-make-gosa' -- "$@"`
if [ $? != 0 ] ; then
  echo "Error: cannot get command line information" >&2
  exit 1
fi

eval set -- "$TEMP"

# Load command  line vars
RELEASE=trunk
DOWNLOAD=
DEPENDS=
DEST=
while true; do
  case "$1" in
    -e|--email) DEBMAIL=$2
                shift 2
                ;;
    -r|--release)
                if [ "$2" != "trunk" ]; then
                  RELEASE=tags/$2
                fi
                shift 2
                ;;
    --depends)  DEPENDS="$2"
                shift 2
                ;;
    --dest)     DEST=$2/
                shift 2
                ;;
    --download) DOWNLOAD=yes
                shift 1
                ;;
    --)         shift
                break
                ;;
    *)          usage
                ;;
  esac
done

[ $# -ne 1 ] && usage
file=$*

# Three possiblities
if [ -d "$file" ]; then

  # It's a local directory
  load_dsc $file/plugin.dsc

  # Setup build environment
  if [ "$OVERRIDE_VERSION" ]; then
	  BUILD_PATH=${DEST}gosa-plugin-${PL_NAME}-${OVERRIDE_VERSION}
  else
	  BUILD_PATH=${DEST}gosa-plugin-${PL_NAME}-${PL_VERSION}
  fi
  if [ -d "$BUILD_PATH" ]; then
    echo "Error: build path $BUILD_PATH already exists" >&2
    exit 2
  fi
  cp -a "$PL_NAME" "$BUILD_PATH"

elif [ -f "$file" ]; then

  # It's a compressed user contributed file
  TMPDIR="/tmp/dh-make-gosa-$PPID"
  if [ -d "/tmp/dh-make-gosa-$PPID"  ]; then
    echo "Error: directory $TMPDIR exists" >&2
    exit 4
  fi

  # Untar
  mkdir -p "$TMPDIR"
  tar --extract --directory "$TMPDIR" -fz "$file" &> /dev/null
  if [ $? -ne 0 ]; then
    echo "Error: cannot extract plugin file - invalid file format" >&2
    exit 5
  fi

  # It's a local directory
  load_dsc TMPDIR/*/plugin.dsc

  # Setup build environment
  BUILD_PATH=${DEST}gosa-plugin-${PL_NAME}-${PL_VERSION}
  mv "$TMPDIR/*" "$BUILD_PATH"

else

  echo "Error: cannot find plugin $file" >&2
  exit 5

fi


PL_DEPENDS=$(echo $PL_DEPENDS$DEPENDS | sed 's/,\s*$//')
echo "Debian package summary ========================================"
echo "Plugin:       $PL_NAME"
echo "Version:      $PL_VERSION"
echo "Description:  $PL_DESCRIPTION"
echo "Depends:      $PL_DEPENDS"
echo "Conflicts:    $PL_CONFLICTS"
echo "Author name:  $PL_AUTHOR"
echo "Author email: $PL_MAIL"
echo
read -s -n 1 -p "Do you want to continue? (y/n)" ans; echo
[ "$ans" != "y" ] && exit 0

pushd . &> /dev/null

cd "$BUILD_PATH"

# Use gosa-plugin skelleton
echo "Calling dh_make..."
echo | dh_make -e "$PL_MAIL" -c gpl -s -n -f gosa-plugin-${PL_NAME}-${PL_VERSION}.tar.gz &> /dev/null
if [ $? -ne 0 ]; then
	echo "Failed to call dh_make - aborting!"
	exit 1
fi

echo "Apdapting debian descriptive files..."

# Generate install file
for dir in admin personal addons gofax gofon generic; do
	[ -d $dir ] && echo -e "$dir\t\t\t/usr/share/gosa/plugins" >> debian/install
done
for dir in help/*; do
	echo -e "$dir\t\t\t/usr/share/gosa/doc/plugins/$PL_NAME" >> debian/install
done
for dir in $(ls -1 locale | grep -v "^en$" | grep -v "^messages.po$"); do
	echo -e "locale/$dir\t\t\t/usr/share/gosa/locale/plugins/$PL_NAME" >> debian/install
done

# Generate dirs
echo "usr/share/gosa" > debian/dirs

# If we've a contrib directory include it to the docs
if [ -d contrib ]; then
	echo "contrib /usr/share/doc/gosa-plugin-$PL_NAME" >> debian/install
fi
if [ -d html ]; then
	for i in html/*; do
		echo "$i /usr/share/gosa/html/plugins/$PL_NAME" >> debian/install
	done
fi

# Fix copyright
sed -i '/^#/d;/^.*likewise for another author.*$/d' debian/copyright
year=$(date +%Y)
sed -i "s/.Copyright (C) YYYY Name OfAuthor./Copyright (C) $year $PL_AUTHOR/g" debian/copyright
sed -i "s/.url:\/\/example.com./http:\/\/www.gosa-project.org/g" debian/copyright
sed -i "/.put author's name and email here.\
/d" debian/copyright
sed -i '/^Upstream/,/^$/d' debian/copyright

# Adapt control
sed -i 's/^Section: unknown/Section: web/g' debian/control
sed -i 's/^Architecture: any/Architecture: all/g' debian/control
if [ "$PL_DEPENDS" ]; then
	sed -i "s/^Depends: .*$/Depends: gosa, $PL_DEPENDS/g" debian/control
else
	sed -i 's/^Depends: .*$/Depends: gosa/g' debian/control
fi
if [ "$PL_CONFLICTS" ]; then
	sed "11Conflicts: $PL_CONFLICTS" debian/control
fi
sed -i 's/^\(Build-Depends: .*\)$/\1, dpatch/g' debian/control
sed -i "s/^Description: .*$/Description: $PL_NAME plugin for GOsa/g" debian/control
sed -i "s/^ <.*$/ %DESCRIPTION%/g" debian/control
dsc=$(tempfile)
{
echo $PL_DESCRIPTION 
cat <<EOF
.
GOsa is a combination of system-administrator and end-user web
interface, designed to handle LDAP based setups.
EOF
}| fmt -suw79 | sed 's/^/ /g' > $dsc
sed -i "/%DESCRIPTION%/r $dsc" debian/control
sed -i "/%DESCRIPTION%/d" debian/control
rm $dsc

# Create patch directory
[ ! -d debian/patches ] && mkdir debian/patches

# Adapt README.debian
cat <<EOF > debian/README.Debian
README.Debian for GOsa $PL_NAME plugin $PL_VERSION
-------------------------------------------

Please read the main GOsa README.Debian file for more information.

----
$PL_AUTHOR <$PL_MAIL>  Fri 02 Jun 2006 16:23:50 +0200
EOF

# Fix README
sed -i "s/Comments regarding the Package/After installing this plugin you may need to reload apache../g" debian/README

# Fix rules
cat <<EOF > debian/rules
#!/usr/bin/make -f
# -*- makefile -*-
# GOsa default plugin debhelper file.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

configure: configure-stamp
configure-stamp:
	dh_testdir
	touch configure-stamp

patch: patch-stamp
patch-stamp:
	dpatch apply-all
	dpatch cat-all >patch-stamp

build: patch build-stamp

build-stamp: configure-stamp 
	dh_testdir

	touch $@

clean: clean-patched unpatch
clean-patched:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp
	dh_clean 

unpatch:
	dpatch deapply-all
	rm -rf patch-stamp debian/patched

install: build
	dh_testdir
	dh_testroot
	dh_clean -k 
	dh_installdirs

# Build architecture-independent files here.
binary-indep: build install
	dh_testdir
	dh_testroot
	dh_installchangelogs 
	dh_installdocs
	dh_installexamples
	dh_install
	dh_installman
	dh_strip
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep
.PHONY: build clean binary-indep binary install configure
EOF

# Adapt postinst/postrm
for file in postinst postrm; do
sed 's!#DEBHELPER#!#DEBHELPER#\
\
# Get apache versions running\
servers=""\
for srv in apache apache-ssl apache2; do\
        if [ -x /usr/sbin/$srv ]; then\
                servers="$srv $servers"\
        fi\
done\
\
# Update gosa\
/usr/sbin/update-gosa\
\
# Finally restart servers\
for server in $servers; do\
        if [ -x /usr/sbin/invoke-rc.d ]; then\
                invoke-rc.d $server restart\
        else\
                /etc/init.d/$server restart\
        fi\
done\
\
!' debian/$file.ex > debian/$file
done

# Remove examples
rm debian/*ex debian/*EX &> /dev/null

popd &> /dev/null

echo "Done."

